/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PostCategoryService } from "../postCategory.service";
import { PostCategoryCreateInput } from "./PostCategoryCreateInput";
import { PostCategory } from "./PostCategory";
import { Post } from "../../post/base/Post";
import { PostCategoryFindManyArgs } from "./PostCategoryFindManyArgs";
import { PostCategoryWhereUniqueInput } from "./PostCategoryWhereUniqueInput";
import { PostCategoryUpdateInput } from "./PostCategoryUpdateInput";

export class PostCategoryControllerBase {
  constructor(protected readonly service: PostCategoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PostCategory })
  async createPostCategory(
    @common.Body() data: PostCategoryCreateInput
  ): Promise<PostCategory> {
    return await this.service.createPostCategory({
      data: {
        ...data,

        category: data.category
          ? {
              connect: data.category,
            }
          : undefined,

        post: data.post
          ? {
              connect: data.post,
            }
          : undefined,
      },
      select: {
        category: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        post: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PostCategory] })
  @ApiNestedQuery(PostCategoryFindManyArgs)
  async postCategories(
    @common.Req() request: Request
  ): Promise<PostCategory[]> {
    const args = plainToClass(PostCategoryFindManyArgs, request.query);
    return this.service.postCategories({
      ...args,
      select: {
        category: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        post: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PostCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async postCategory(
    @common.Param() params: PostCategoryWhereUniqueInput
  ): Promise<PostCategory | null> {
    const result = await this.service.postCategory({
      where: params,
      select: {
        category: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        post: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PostCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePostCategory(
    @common.Param() params: PostCategoryWhereUniqueInput,
    @common.Body() data: PostCategoryUpdateInput
  ): Promise<PostCategory | null> {
    try {
      return await this.service.updatePostCategory({
        where: params,
        data: {
          ...data,

          category: data.category
            ? {
                connect: data.category,
              }
            : undefined,

          post: data.post
            ? {
                connect: data.post,
              }
            : undefined,
        },
        select: {
          category: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,

          post: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PostCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePostCategory(
    @common.Param() params: PostCategoryWhereUniqueInput
  ): Promise<PostCategory | null> {
    try {
      return await this.service.deletePostCategory({
        where: params,
        select: {
          category: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,

          post: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
